"""
12-10 装饰器 三
"""

# Python 为装饰器特别提供的语法塘。
# 这个语法塘才是 Python 装饰器的核心所在。

# 有什么办法在我们增加打印时间之后，依然可以直接调用f1？
# 使用@符号

import time


def decorator(func):
    def wrapper():
        print(time.time())
        func()
    return wrapper


@decorator
def f1():
    print('This is a function')


f1()

# 1550489230.117764
# This is a function

# 我们没有改变原来的调用逻辑。
# c8和c9的写法都改变了函数的调用方式.
# 我们可以接受定义时候的复杂,但拒不接受调用时候的复杂.
# 定义只需要写一次,但是到处都需要调用.
# 使用语法塘之后就可以保持原来调用方式不变.
# 这就是装饰器最大的特点，也是它意义所在。
# 只有有了这个@符号，才能保证代码不会被破坏的。

# 为什么叫装饰器？
# 原来函数f1只有一个打印功能，我现在在f1上面添加一个装饰物一样的东西，现在f1就被添加了一个新的功能，打印时间。

# 语法塘:简化写法

# Javascript ES6 里提供一个机制,可以用关键字 class 来定义一个JS类.
# 在ES6出现之前,也可以用JS原型链来模拟面向对象,但是非常怪异.
# 实质上来说, class 定义也属于一个语法塘.ES6并没有改变JS的运行机制.
# 最喜欢使用语法塘的是C#.

# 是不是选择使用装饰器取决于你，并不是非要使用装饰器。

# 装饰器实际上体现了AOP编程思想。
# AOP是一个设计模式。
# 七月老师推荐AOP的编程思想。



